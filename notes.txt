import React, { Component } from "react";
import { Card, Image } from "semantic-ui-react";
import data from "../data.json";
import Barter from "../ethereum/Barter";

class ReadNFT extends Component {
  static async getInitialProps({ nftAddress, nftToken }) {
    console.log("contract Addrss", props.query.address);
    console.log("ReadNFT nftadress", nftAddress);
    console.log("ReadNFT nftToken", nftToken);
    const barter = Barter(props.query.address);
    const NFTdetails = await barter.methods.getNFTdetails(
      this.props.nftAddress,
      this.props.nftToken
    );
    console.log(" ReadNFT NFTDetails ", NFTdetails);
    return {
      nftName: NFTdetails[0],
      nftSymbol: NFTdetails[1],
      nftUri: NFTdetails[2],
    };
  }

  renderNFT() {
    const { nftName, nftSymbol, nftUri } = this.props;
    const items = [
      {
        Image: nftUri,
        Header: nftName,
        Meta: nftSymbol,
      },
    ];

    console.log(" ReadNFT details", items.Image, nftSymbol, nftUri);
    return (
      <Card>
        <Image src={nftUri} />
        <Card.Content>
          <Card.Header>{nftName}</Card.Header>
          <Card.Meta>{nftSymbol}</Card.Meta>
        </Card.Content>
      </Card>
    );
  }
  render() {
    return <div>{this.renderNFT()}</div>;
  }
}

export default ReadNFT;



import React, { Component, useEffect } from "react";

import { Card, Image } from "semantic-ui-react";

import Barter from "../ethereum/Barter";

class ReadNFT extends Component {
  state = {
    uri: "",
    image: "",
    header: "",
    meta: "",
    link: "https://gateway.pinata.cloud/ipfs/",
  };

  getMetaFromURI = async () => {
    try {
      let response = await fetch(
        `${this.state.link}${this.state.uri.slice(7)}`,
        {
          mode: "no-cors",
        }
      );
      let responseJson = await response.json();
      let nftImage = responseJson.image;
      let ImageResponse = await fetch(`${this.state.link}${nftImage.slice(7)}`);
      // console.log("Image Link", ImageResponse);
      this.setState({ image: ImageResponse.url });
      // return ImageResponse;
    } catch (error) {
      console.error(error);
    }
  };

  renderNFT() {
    const barter = Barter(this.props.barterAddress);
    try {
      barter.methods
        .getNFTdetails(this.props.nftAddress, this.props.nftToken)
        .call()
        .then((res) => {
          this.setState({
            uri: res[2],
            header: res[0],
            meta: res[1],
          });
        });

      this.getMetaFromURI();
    } catch (error) {
      console.log(error);
    }

    return (
      <div>
        <Card style={{ marginBottom: "20px" }} color="purple">
          <Image src={this.state.image} />
          <Card.Content>
            <Card.Header>{this.state.header}</Card.Header>
            <Card.Meta>
              {this.state.meta} #{this.props.nftToken}
            </Card.Meta>
            <Card.Description>
              <a href={`https://etherscan.io/address/${this.props.nftAddress}`}>
                view on etherscan
              </a>
            </Card.Description>
          </Card.Content>
        </Card>
      </div>
    );
  }

  render() {
    return <>{this.renderNFT()}</>;
  }
}

export default ReadNFT;


import BarterFactory from "../ethereum/contracts/BarterFactory.json";
import Web3 from "web3";
import { useState, useEffect } from "react";

const InitialInfo = {
  connected: false,
  status: null,
  account: null,
  contract: null,
};
const LoadEthereum = () => {
  const [info, setInfo] = useState(InitialInfo);

  const init = async () => {
    if (window.ethereum?.isMetaMask) {
      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });
      const networkId = await window.ethereum.request({
        method: "net_version",
      });
      if (networkId == 4) {
        let web3 = new Web3(window.ethereum);
        setInfo({
          ...InitialInfo,
          connected: true,
          account: accounts[0],
          contract: new web3.eth.Contract(
            BarterFactory.abi,
            BarterFactory.address
          ),
        });
      } else {
        setInfo({
          ...InitialInfo,
          status: "you need to be on the Rinkeby Test Network",
        });
      }
    } else {
      setInfo(...InitialInfo, { status: "you need MetaMask" });
    }
  };

  const initOnChange = () => {
    if (window.ethereum) {
      window.ethereum.on("accountsChanged", () => {
        window.location.reload();
      });
      window.ethereum.on("ChainChanged", () => {
        window.location.reload();
      });
    }
  };

  const getDrops = async () => {
    info.contract.methods
      .deployedBarterTrades(2)
      .call()
      .then((res) => {
        console.log(res);
      })
      .catch((err) => {
        console.log(err);
      });
  };

  const loadBarter = async () => {};

  useEffect(() => {
    init();
    initOnChange();
  }, []);
  return (
    <div>
      <button onClick={() => getDrops()}>get Deployed BarterTrades</button>
    </div>
  );
};

export default LoadEthereum;
